import React, { useEffect, useState } from 'react';
import { Card, FormField, Loader } from '../components';
import * as dotenv from 'dotenv';

dotenv.config();

const RenderCards = ({ data, title }) => {
  if (data?.length > 0) {
    return (
      data.slice().reverse().map((post, index) => <Card key={index} photo={post.url} name={post.key}/>)
    );
  }

  return (
    <h2 className="mt-5 font-bold text-[#6469ff] text-xl uppercase">{title}</h2>
  );
};

const Home = () => {
  const [loading, setLoading] = useState(false);
  const [allPosts, setAllPosts] = useState(null);

  const [inputValue, setInputValue] = useState('');

  const handleButtonClick = async () => {
    if (inputValue.trim() === ''){
      alert('We need your email to send files :) ')
    } else{

      // TODO: NEED TO CHANGE URL HERE - MAKING REQUEST TO DOWNLOAD ENDPOINT

        const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/v1/download` , {
          method: "POST",
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            email: inputValue
          })
        });
        const data = await response.json();
        alert(data)
    }
  }

  const fetchPosts = async () => {
    setLoading(true);

    // TODO: CHANGE URL HERE TO MAKE POST REQUEST TO GET ALL THE POST ENDPOINT
    
    try {
      const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/v1/post`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        const result = await response.json();        
        setAllPosts(result.data);
      }
    } catch (err) {
      alert(err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchPosts();
  }, []);

  return (
    <section className="max-w-7xl mx-auto">
      <div>
        <h1 className="font-extrabold text-[#222328] text-[32px]">The Community Showcase</h1>
        <p className="mt-2 text-[#666e75] text-[14px] max-w-[500px]">Browse through a collection of imaginative and visually stunning images generated by DALL-E AI</p>
      </div>

      <div className="flex flex-row mt-16 w-max items-end">
        <FormField
        handleChange={(e) => setInputValue(e.target.value)}
          labelName="Email Address to download all images in .Zip"
          type="text"
          name="text"
          placeholder="Enter your email address"
        />
        <button onClick={handleButtonClick} className="mx-5 my-1 font-inter font-medium  bg-[#0366d6] text-white w-60 h-10 rounded-md hover:bg-[#1872da]">Download â¬‡</button>
      </div>
      

      <div className="mt-10">
        {loading ? (
          <div className="flex justify-center items-center">
            <Loader />
          </div>
        ) : (
          <>
            <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-4 grid-cols-2 gap-4">
              {(
                <RenderCards
                  data={allPosts}
                  title="No Posts Yet"
                />
              )}
            </div>
          </>
        )}
      </div>
    </section>
  );
};

export default Home;
