Metadata:
  Generator: "Dixit Ghodadara"

## s3 Buckets

Resources:
    S3Bucket:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: "pixelpen-docker-s3"
            BucketEncryption: 
                ServerSideEncryptionConfiguration: 
                  - 
                    ServerSideEncryptionByDefault: 
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: true

    S3Bucket2:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: "pixelpen-image-store-s3"
            BucketEncryption: 
                ServerSideEncryptionConfiguration: 
                  - 
                    ServerSideEncryptionByDefault: 
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: true
            CorsConfiguration: 
                CorsRules: 
                  - 
                    AllowedHeaders: 
                      - "*"
                    AllowedMethods: 
                      - "GET"
                      - "PUT"
                      - "POST"
                      - "DELETE"
                      - "HEAD"
                    AllowedOrigins: 
                      - "*"

    S3Bucket3:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: "pixelpen-frontend-s3"
            BucketEncryption: 
                ServerSideEncryptionConfiguration: 
                  - 
                    ServerSideEncryptionByDefault: 
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: true
            VersioningConfiguration: 
                Status: "Enabled"

    S3BucketPolicy:
        Type: "AWS::S3::BucketPolicy"
        Properties:
            Bucket: !Ref S3Bucket2
            PolicyDocument: 
                Version: "2012-10-17"
                Statement: 
                  - 
                    Sid: "AllowPublicPutGetObject"
                    Effect: "Allow"
                    Principal: "*"
                    Action: 
                      - "s3:PutObject"
                      - "s3:GetObject"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket2}/*"

    S3BucketPolicy2:
        Type: "AWS::S3::BucketPolicy"
        Properties:
            Bucket: !Ref S3Bucket3
            PolicyDocument: 
                Version: "2012-10-17"
                Statement: 
                  - 
                    Sid: "AllowPublicPutGetObject"
                    Effect: "Allow"
                    Principal: "*"
                    Action: 
                      - "s3:PutObject"
                      - "s3:GetObject"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket3}/*"
                  - 
                    Sid: "2"
                    Effect: "Allow"
                    Principal: 
                        AWS: "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity E2PBPFVFYB9PMX"
                    Action: "s3:GetObject"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket3}/*"

## SQS + API + LAMBDA    

    ConnectionQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "connection-queue"

    ApiGateway:
      Type: "AWS::ApiGateway::RestApi"
      Properties:
        Name: "my-api-gateway"
        EndpointConfiguration:
          Types:
            - "REGIONAL"

    MailsendResource:
      Type: "AWS::ApiGateway::Resource"
      Properties:
        RestApiId: !Ref ApiGateway
        ParentId: !GetAtt ApiGateway.RootResourceId
        PathPart: "mailsend"

    MailsendMethod:
      Type: "AWS::ApiGateway::Method"
      Properties:
        RestApiId: !Ref ApiGateway
        ResourceId: !Ref MailsendResource
        HttpMethod: POST
        AuthorizationType: NONE
        Integration:
          Type: AWS
          IntegrationHttpMethod: POST
          Uri: !Sub "arn:aws:apigateway:${AWS::Region}:sqs:path/connection-queue"
          Credentials: "arn:aws:iam::770852352841:role/LabRole"
          RequestParameters:
            integration.request.header.Content-Type: "'application/x-www-form-urlencoded'"
          RequestTemplates:
            "application/json": "Action=SendMessage&MessageBody=$input.body"
          PassthroughBehavior: NEVER
          
    LambdaFunction:
      Type: "AWS::Lambda::Function"
      Properties:
        Code:
          S3Bucket: "pixelpen-mail-service"
          S3Key: "index.zip"
        Handler: "index.handler"
        Runtime: "nodejs18.x"
        Timeout: 30
        Role: "arn:aws:iam::770852352841:role/LabRole"
        Layers:
          - arn:aws:lambda:us-east-1:770852352841:layer:Nodemailer:3

    LambdaPermissions:
      Type: "AWS::Lambda::Permission"
      Properties:
        Action: "lambda:InvokeFunction"
        FunctionName: !Ref LambdaFunction
        Principal: "sqs.amazonaws.com"
        SourceArn: !GetAtt ConnectionQueue.Arn

    QueueEventSourceMapping:
      Type: "AWS::Lambda::EventSourceMapping"
      Properties:
        BatchSize: 1
        Enabled: true
        EventSourceArn: !GetAtt ConnectionQueue.Arn
        FunctionName: !Ref LambdaFunction
    
    SecretsManagerSecret:
      Type: "AWS::SecretsManager::Secret"
      Properties:
        Name: "OpenAIKey"
        SecretString: "{\"OPEN_AI_API_KEY\":\"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\"}"

## BEANSTALK - SEARCH this AWS_S3_BUCKET AND CHANGE THE VALUE

# ENVIRONMENT